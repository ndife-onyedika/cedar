# Generated by Django 3.2 on 2023-02-08 05:00

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fields.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('settings', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email address')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Phone number')),
                ('address', models.TextField(blank=True, null=True)),
                ('occupation', models.CharField(blank=True, max_length=50, null=True)),
                ('avatar', django_fields.fields.DefaultStaticImageField(blank=True, upload_to='avatars/')),
                ('account_number', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('account_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.accountchoice')),
            ],
        ),
        migrations.CreateModel(
            name='NextOfKin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=250, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email address')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Phone number')),
                ('address', models.TextField(blank=True, null=True)),
                ('relationship', models.CharField(blank=True, choices=[('parent', 'Parent'), ('sibling', 'Sibling'), ('caregiver', 'Caregiver'), ('benefactor', 'Benefactor'), ('other-relation', 'Other Relation')], max_length=100, null=True, verbose_name='Relationship with Kin')),
                ('member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='accounts.member')),
            ],
            options={
                'verbose_name': 'Next Of Kin',
                'verbose_name_plural': 'Next Of Kins',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.CharField(max_length=250, null=True)),
                ('email', models.EmailField(default='default@email.com', max_length=254, unique=True, verbose_name='Email')),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
        ),
    ]
